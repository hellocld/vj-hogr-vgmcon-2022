[gd_resource type="VisualShader" load_steps=16 format=2]

[ext_resource path="res://Sprites/512_noise.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeVec3Uniform" id=7]
uniform_name = "UV_Off"

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "view"

[sub_resource type="VisualShaderNodeVectorOp" id=9]

[sub_resource type="VisualShaderNodeVectorOp" id=10]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShaderNodeSwitch" id=11]

[sub_resource type="VisualShaderNodeBooleanUniform" id=12]
uniform_name = "Enable_Static"

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "time"

[sub_resource type="VisualShaderNodeVectorFunc" id=14]
function = 5

[sub_resource type="VisualShaderNodeScalarFunc" id=15]
function = 12

[sub_resource type="VisualShaderNodeVectorCompose" id=16]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 1.0 ]

[sub_resource type="VisualShaderNodeTexture" id=1]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=17]
default_input_values = [ 0, 0.0, 1, 0.1 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=18]
default_input_values = [ 0, 0.0, 1, 0.33333 ]

[sub_resource type="VisualShaderNodeScalarUniform" id=19]
uniform_name = "HueOffset"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform bool Enable_Static;
uniform vec3 UV_Off;
uniform sampler2D tex_frg_2;
uniform float HueOffset;



void vertex() {
// Output:0

}

void fragment() {
// BooleanUniform:15
	bool n_out15p0 = Enable_Static;

// VectorUniform:10
	vec3 n_out10p0 = UV_Off;

// Input:11
	vec3 n_out11p0 = VIEW;

// VectorOp:12
	vec3 n_out12p0 = n_out10p0 + n_out11p0;

// VectorOp:13
	vec3 n_in13p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out13p0 = n_out12p0 * n_in13p1;

// Texture:2
	vec4 tex_frg_2_read = texture(tex_frg_2, n_out13p0.xy);
	vec3 n_out2p0 = tex_frg_2_read.rgb;
	float n_out2p1 = tex_frg_2_read.a;

// Input:16
	float n_out16p0 = TIME;

// ScalarOp:20
	float n_in20p1 = 0.10000;
	float n_out20p0 = n_out16p0 * n_in20p1;

// ScalarUniform:22
	float n_out22p0 = HueOffset;

// ScalarOp:21
	float n_out21p0 = n_out20p0 + n_out22p0;

// ScalarFunc:18
	float n_out18p0 = abs(n_out21p0);

// VectorCompose:19
	float n_in19p1 = 1.00000;
	float n_in19p2 = 1.00000;
	vec3 n_out19p0 = vec3(n_out18p0, n_in19p1, n_in19p2);

// VectorFunc:17
	vec3 n_out17p0;
	{
		vec3 c = n_out19p0;
		vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
		vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
		n_out17p0 = c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
	}

// VectorSwitch:14
	vec3 n_out14p0;
	if(n_out15p0)
	{
		n_out14p0 = n_out2p0;
	}
	else
	{
		n_out14p0 = n_out17p0;
	}

// Output:0
	ALBEDO = n_out14p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -1191, -20 )
nodes/fragment/0/position = Vector2( 540, 20 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -80, 180 )
nodes/fragment/10/node = SubResource( 7 )
nodes/fragment/10/position = Vector2( -680, 180 )
nodes/fragment/11/node = SubResource( 8 )
nodes/fragment/11/position = Vector2( -680, 240 )
nodes/fragment/12/node = SubResource( 9 )
nodes/fragment/12/position = Vector2( -460, 180 )
nodes/fragment/13/node = SubResource( 10 )
nodes/fragment/13/position = Vector2( -280, 180 )
nodes/fragment/14/node = SubResource( 11 )
nodes/fragment/14/position = Vector2( 160, 80 )
nodes/fragment/15/node = SubResource( 12 )
nodes/fragment/15/position = Vector2( -100, 80 )
nodes/fragment/16/node = SubResource( 13 )
nodes/fragment/16/position = Vector2( -1280, 380 )
nodes/fragment/17/node = SubResource( 14 )
nodes/fragment/17/position = Vector2( -300, 460 )
nodes/fragment/18/node = SubResource( 15 )
nodes/fragment/18/position = Vector2( -760, 380 )
nodes/fragment/19/node = SubResource( 16 )
nodes/fragment/19/position = Vector2( -520, 380 )
nodes/fragment/20/node = SubResource( 17 )
nodes/fragment/20/position = Vector2( -1120, 360 )
nodes/fragment/21/node = SubResource( 18 )
nodes/fragment/21/position = Vector2( -940, 380 )
nodes/fragment/22/node = SubResource( 19 )
nodes/fragment/22/position = Vector2( -1140, 500 )
nodes/fragment/connections = PoolIntArray( 11, 0, 12, 1, 10, 0, 12, 0, 2, 0, 14, 1, 14, 0, 0, 0, 15, 0, 14, 0, 18, 0, 19, 0, 19, 0, 17, 0, 17, 0, 14, 2, 16, 0, 20, 0, 12, 0, 13, 0, 13, 0, 2, 0, 20, 0, 21, 0, 21, 0, 18, 0, 22, 0, 21, 1 )
